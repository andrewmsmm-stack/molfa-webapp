import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
import aiosqlite
import config

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°—Ç–∞–Ω–∏
class TestStates(StatesGroup):
    waiting_for_contact = State()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def create_db():
    async with aiosqlite.connect(config.DATABASE_NAME) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                username TEXT,
                phone TEXT,
                test_completed INTEGER DEFAULT 0
            )
        ''')
        await db.commit()

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def save_user(user_id, first_name, username, phone):
    async with aiosqlite.connect(config.DATABASE_NAME) as db:
        await db.execute('''
            INSERT OR REPLACE INTO users (user_id, first_name, username, phone)
            VALUES (?, ?, ?, ?)
        ''', (user_id, first_name, username, phone))
        await db.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'], state='*')
async def start_command(message: types.Message, state: FSMContext):
    await state.finish()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if message.text and 'result_' in message.text:
        await handle_quiz_result(message)
        return
    
    # –ó–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞—Ä—Ç
    async with aiosqlite.connect(config.DATABASE_NAME) as db:
        cursor = await db.execute(
            'SELECT phone FROM users WHERE user_id = ?', 
            (message.from_user.id,)
        )
        result = await cursor.fetchone()
    
    if result and result[0]:
        await show_main_menu(message)
    else:
        await request_contact(message)

# –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫–≤—ñ–∑—É –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
async def handle_quiz_result(message: types.Message):
    try:
        score_text = message.text.split('result_')[1]
        score = int(score_text)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        async with aiosqlite.connect(config.DATABASE_NAME) as db:
            await db.execute('''
                UPDATE users SET test_completed = ? WHERE user_id = ?
            ''', (score, message.from_user.id))
            await db.commit()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤ Google Sheets
        try:
            from google_sheets import add_quiz_result
            add_quiz_result(message.from_user.id, score)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤ Google Sheets: {e}")
        
        # –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        await message.answer("üéâ –í–ê–®–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò!\n\n–ú–æ–∂–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –≤ —Å—Ç–æ—Ä—ñ—Å —Ç–∞ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ –º–µ–Ω–µ")
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ 3 —Å–µ–∫—É–Ω–¥–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        await asyncio.sleep(3)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—É –∫–∞—Ä—Ç–∏–Ω–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–ª—ñ–≤ (13 –ø–∏—Ç–∞–Ω—å * 3 = –º–∞–∫—Å–∏–º—É–º 39 –±–∞–ª—ñ–≤)
        if 13 <= score <= 19:
            image_url = "https://raw.githubusercontent.com/molfartaro/molfa-webapp/main/result1.png"
            result_type = "–ü—Ä–∏—Ö–æ–≤–∞–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª"
        elif 20 <= score <= 29:
            image_url = "https://raw.githubusercontent.com/molfartaro/molfa-webapp/main/result2.png"
            result_type = "–ü–æ–º—ñ—Ä–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ"
        elif 30 <= score <= 35:
            image_url = "https://raw.githubusercontent.com/molfartaro/molfa-webapp/main/result3.png"
            result_type = "–°–∏–ª—å–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ"
        else:  # 36-39 –±–∞–ª—ñ–≤
            image_url = "https://raw.githubusercontent.com/molfartaro/molfa-webapp/main/result4.png"
            result_type = "–í–∏–Ω—è—Ç–∫–æ–≤—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ"
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
        try:
            await message.answer_photo(photo=image_url)
            print(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {result_type} (–±–∞–ª–∏: {score})")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            await message.answer(f"üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_type}\n–ë–∞–ª–∏: {score}/39")
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ 30 —Å–µ–∫—É–Ω–¥ —ñ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await asyncio.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥
        
        # –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞–∫–∞–¥–µ–º—ñ—é - –ë–ï–ó –∫–Ω–æ–ø–∫–∏
        first_academy_message = (
            "‚ú® –í—ñ—Ç–∞—é –≤–∞—Å!\n"
            "–í–∏ —â–æ–π–Ω–æ –ø–æ–±–∞—á–∏–ª–∏, —â–æ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ —É –≤–∞—Å —î ‚Äî —ñ –≤–æ–Ω–∏ –Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤—ñ. "
            "–¢–∞–∫—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è —Å–ø—Ä–∞–≤–¥—ñ —Ä—ñ–¥–∫–æ ‚Äî —ñ —Ü–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î, —â–æ –≤–∏ –º–∞—î—Ç–µ –æ—Å–æ–±–ª–∏–≤–∏–π –¥–∞—Ä.\n\n"
            "–Ø —à—É–∫–∞—é —Å–∞–º–µ —Ç–∞–∫–∏—Ö —è–∫ –≤–∏!\n\n"
            "–ü–∞–º'—è—Ç–∞—é —Å–µ–±–µ –Ω–∞ –≤–∞—à–æ–º—É –º—ñ—Å—Ü—ñ, –∫–æ–ª–∏ –Ω–µ –∑–Ω–∞–≤ —è–∫ —ñ –¥–µ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ —ó—Ö. "
            "–°–∞–º–µ —Ç–æ–º—É —è —Å—Ç–≤–æ—Ä–∏–≤ –ø–µ—Ä—à—É –ê–∫–∞–¥–µ–º—ñ—é –¢–∞—Ä–æ.\n\n"
            "–¶–µ –ø—Ä–æ—Å—Ç—ñ—Ä, –¥–µ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Å–≤—ñ–π –¥–∞—Ä, –∞ –π —Ä–æ–∑–∫—Ä–∏—Ç–∏ –π–æ–≥–æ –Ω–∞ –º–∞–∫—Å–∏–º—É–º:\n"
            "- –ø—ñ–∑–Ω–∞—î—Ç–µ —Å–≤–æ—ó –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–ø–∞–Ω—É—î—Ç–µ –º–µ—Ç–æ–¥–∏ —ó—Ö —Ä–æ–∑–≤–∏—Ç–∫—É;\n"
            "- –æ–ø–∞–Ω—É—î—Ç–µ –±–µ–∑–ø–µ—á–Ω—É –º–µ—Ç–æ–¥–∏–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –¢–∞—Ä–æ, —â–æ–± –≤–ø–µ–≤–Ω–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥–∏ –±–µ–∑ —Ä–∏–∑–∏–∫—É –Ω–∞—à–∫–æ–¥–∏—Ç–∏ —Å–æ–±—ñ —á–∏ –∫–ª—ñ—î–Ω—Ç—É;\n"
            "- –Ω–∞–ø–æ–≤–Ω–∏—Ç–µ —Å–≤–æ—î –∂–∏—Ç—Ç—è —Å–µ–Ω—Å–æ–º —ñ –Ω–æ–≤–∏–º–∏ —Ñ–∞—Ä–±–∞–º–∏, –≤—ñ–¥–∫—Ä–∏–≤—à–∏ —Å–≤–æ—î –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –¢–∞—Ä–æ;\n"
            "- –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–µ —Å–≤–æ—é –º—ñ—Å—ñ—é –¥–æ–ø–æ–º–æ–≥–∏ –ª—é–¥—è–º —É —Å—Ç–∞–±—ñ–ª—å–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –¥–æ—Ö–æ–¥—É."
        )
        
        await message.answer(first_academy_message)
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        await asyncio.sleep(10)

        # –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∞–∫–∞–¥–µ–º—ñ—ó
        photo_urls = [
            "https://raw.githubusercontent.com/molfartaro/molfa-webapp/main/academy-image.png",
            "https://github.com/molfartaro/molfa-webapp/blob/main/academy-image.png?raw=true",
            "https://molfartaro.github.io/molfa-webapp/academy-image.png"
        ]
        
        photo_sent = False
        for photo_url in photo_urls:
            try:
                await message.answer_photo(photo=photo_url)
                photo_sent = True
                print(f"–§–æ—Ç–æ –∞–∫–∞–¥–µ–º—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∑ URL: {photo_url}")
                break
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑ URL {photo_url}: {e}")
                continue
        
        if not photo_sent:
            print("–ñ–æ–¥–Ω–∞ –∑ URL-–∞–¥—Ä–µ—Å –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ —Ñ–æ—Ç–æ")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ê–∫–∞–¥–µ–º—ñ—ó
        academy_keyboard = InlineKeyboardMarkup()
        academy_keyboard.add(InlineKeyboardButton(
            "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –ê–∫–∞–¥–µ–º—ñ—é", 
            callback_data="academy_info"
        ))
        
        # –î—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–º'—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫–Ω–æ–ø–∫–æ—é
        user_name = message.from_user.first_name or "–¥—Ä—É–∂–µ"
        second_academy_message = (
            f"–ú–∞—é —á–µ—Å—Ç—å, {user_name}, –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ —ñ –ø—ñ–¥—Ç—Ä–∏–º–∫—É "
            "–Ω–∞ —à–ª—è—Ö—É –≤–∞—à–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ä–æ–∑–∫—Ä–∏—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª —â–µ –≥–ª–∏–±—à–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É –¢–∞—Ä–æ.\n\n"
            "–ó–∞—Ä–∞–∑ —É –≤–∞—Å —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É ¬´–î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –ê–∫–∞–¥–µ–º—ñ—é¬ª ‚Äî "
            "—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ —ñ–Ω—à—ñ:\n"
            "- –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –≤—ñ–¥ –º–æ—î—ó –∫–æ–º–∞–Ω–¥–∏;\n"
            "- –∑–∞–∫—Ä—ñ–ø–∏—Ç–∏ –∑–∞ —Å–æ–±–æ—é –Ω–∞–π–∫—Ä–∞—â—ñ —É–º–æ–≤–∏ –Ω–∞–≤—á–∞–Ω–Ω—è;\n"
            "- –∞ —Ç–∞–∫–æ–∂ —à–∞–Ω—Å —É–≤—ñ–π—Ç–∏ –≤ —á–∏—Å–ª–æ –ø–µ—Ä—à–∏—Ö 50 —É—á–Ω—ñ–≤, —è–∫—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å –æ—Å–æ–±–ª–∏–≤–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –≤—ñ–¥ –º–µ–Ω–µ –æ—Å–æ–±–∏—Å—Ç–æ.\n\n"
            "‚¨áÔ∏è–ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –ê–∫–∞–¥–µ–º—ñ—é¬ª ‚Äî —ñ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–≤–µ—Ä—ñ –¥–æ —ñ—Å—Ç–∏–Ω–Ω–æ–≥–æ —à–ª—è—Ö—É –¥–æ —Å–µ–±–µ.‚¨áÔ∏è\n\n"
            "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
        )
        
        await message.answer(
            second_academy_message,
            reply_markup=academy_keyboard
        )
        
    except (ValueError, IndexError):
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏
async def get_all_users():
    try:
        async with aiosqlite.connect(config.DATABASE_NAME) as db:
            cursor = await db.execute('SELECT user_id FROM users')
            users = await cursor.fetchall()
            return [user[0] for user in users]
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
        return []

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(lambda m: m.from_user.id == config.ADMIN_TELEGRAM_ID and m.text.startswith('/send '))
async def admin_send(message: types.Message):
    text = message.text[6:]  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ '/send '
    if not text.strip():
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏. –ü—Ä–∏–∫–ª–∞–¥: /send –ü—Ä–∏–≤—ñ—Ç –≤—Å—ñ–º!")
        return
    
    users = await get_all_users()
    if not users:
        await message.answer("–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        return
    
    sent_count = 0
    error_count = 0
    
    await message.answer(f"–†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
    
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
            await asyncio.sleep(0.1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –Ω–µ –∑–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –∑–∞ —Å–ø–∞–º
        except Exception as e:
            error_count += 1
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
    
    await message.answer(f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ü–æ–º–∏–ª–æ–∫: {error_count}")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –ê–∫–∞–¥–µ–º—ñ—é"
@dp.callback_query_handler(lambda c: c.data == 'academy_info')
async def academy_info_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await callback_query.message.answer(
        "–ß—É–¥–æ–≤–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞! –ó –≤–∞–º–∏ –∑–≤ º—è–∂–µ—Ç—å—Å—è –º–æ—è –∫–æ–º–∞–Ω–¥–∞!"
    )
    
    # –ü–æ–∑–Ω–∞—á–∫–∞ –≤ Google Sheets
    try:
        from google_sheets import mark_academy_interest
        mark_academy_interest(callback_query.from_user.id)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–∫–∏ –≤ Google Sheets: {e}")

# –ó–∞–ø–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –Ω–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–º
async def request_contact(message: types.Message):
    contact_button = KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    keyboard = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)
    
    await message.answer(
        "–í—ñ—Ç–∞—é, –ù–µ–∑–ª–∞–º–Ω—ñ!\n\n"
        "‚ú® –Ø —Ä–æ–∑—Ä–æ–±–∏–≤ –¥–ª—è –≤–∞—Å —Ü–µ–π —Ç–µ—Å—Ç, –∞–±–∏ –≤–∏ —Ä–∞–∑ —ñ –Ω–∞–∑–∞–≤–∂–¥–∏ –∑–º–æ–≥–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —Å–æ–±—ñ –Ω–∞ –≤–∞–∂–ª–∏–≤–µ –ø–∏—Ç–∞–Ω–Ω—è: **—á–∏ –¥—ñ–π—Å–Ω–æ —è —â–æ—Å—å –≤—ñ–¥—á—É–≤–∞—é —ñ —è–∫—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –≤ –º–µ–Ω—ñ?**\n\n"
        "–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∞—à—ñ –¥–∞—Ä–∏ –≤–∂–µ —Ä–æ–∑–≤–∏–Ω–µ–Ω—ñ —á–∏ –ø–æ–∫–∏ —â–æ —Å–ø–ª—è—Ç—å, —ñ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó, —è–∫ —ó—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏.\n\n"
        "–ù–µ –≤—ñ–¥–∫–ª–∞–¥–∞–π—Ç–µ ‚Äî —Å–∫–æ—Ä—ñ—à–µ –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É **¬´–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç¬ª** —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ —Å–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç üîÆ\n\n"
        "üì± –ê–ª–µ —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
        parse_mode='Markdown',
        reply_markup=keyboard
    )
    await TestStates.waiting_for_contact.set()

# –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É
@dp.message_handler(content_types=['contact'], state=TestStates.waiting_for_contact)
async def handle_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    
    await save_user(
        user_id=message.from_user.id,
        first_name=contact.first_name,
        username=message.from_user.username or '',
        phone=contact.phone_number
    )
    
    # Google Sheets
    try:
        from google_sheets import add_user_to_sheet
        add_user_to_sheet(
            user_id=message.from_user.id,
            first_name=contact.first_name,
            username=message.from_user.username or '',
            phone=contact.phone_number
        )
    except Exception as e:
        print(f"Google Sheets –ø–æ–º–∏–ª–∫–∞: {e}")
    
    print(f"–ù–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {contact.first_name} - {contact.phone_number}")
    
    await message.answer(
        f"‚úÖ –î—è–∫—É—é, {contact.first_name}!\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n\n",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    await state.finish()
    await show_main_menu(message)

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def show_main_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        "üîÆ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", 
        url="https://molfartaro.github.io/molfa-webapp/"
    ))
    
    await message.answer(
    "‚¨áÔ∏è–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ \"–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\", —â–æ–± –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç. ‚¨áÔ∏è\n\n"
    "–ê –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–æ—Ç—ñ¬ª ‚Äî —ñ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π.\n\n"
    "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
    reply_markup=keyboard
)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await create_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    await dp.start_polling(bot)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
def setup_sheet_headers():
    try:
        from google_sheets import check_sheet_structure
        check_sheet_structure()
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞!")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets: {e}")

if __name__ == '__main__':
    setup_sheet_headers()
    asyncio.run(main())